
export interface UploadedFile {
  id: string;
  name: string;
  path: string;
  type: string;
  size: number;
  content: string;
  lastModified: string;
}

export interface ProjectFiles {
  configs: UploadedFile[];
  templates: UploadedFile[];
  sources: UploadedFile[];
}

class FileUploadService {
  private files: Map<string, UploadedFile> = new Map();
  private listeners: ((files: ProjectFiles) => void)[] = [];

  subscribe(listener: (files: ProjectFiles) => void) {
    this.listeners.push(listener);
    return () => {
      this.listeners = this.listeners.filter(l => l !== listener);
    };
  }

  private notifyListeners() {
    const projectFiles = this.getProjectFiles();
    this.listeners.forEach(listener => listener(projectFiles));
  }

  async uploadFiles(fileList: FileList): Promise<UploadedFile[]> {
    const uploadedFiles: UploadedFile[] = [];

    for (let i = 0; i < fileList.length; i++) {
      const file = fileList[i];
      const content = await this.readFileContent(file);
      
      const uploadedFile: UploadedFile = {
        id: this.generateId(),
        name: file.name,
        path: file.webkitRelativePath || file.name,
        type: this.getFileType(file.name),
        size: file.size,
        content,
        lastModified: new Date(file.lastModified).toISOString()
      };

      this.files.set(uploadedFile.id, uploadedFile);
      uploadedFiles.push(uploadedFile);
    }

    this.notifyListeners();
    return uploadedFiles;
  }

  private async readFileContent(file: File): Promise<string> {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result as string);
      reader.onerror = reject;
      reader.readAsText(file);
    });
  }

  private getFileType(fileName: string): string {
    const ext = fileName.split('.').pop()?.toLowerCase();
    if (ext === 'json') return 'config';
    if (ext === 'j2' || ext === 'jinja2') return 'template';
    if (ext === 'c' || ext === 'h' || ext === 'cpp') return 'source';
    if (ext === 'md') return 'documentation';
    return 'other';
  }

  private generateId(): string {
    return Math.random().toString(36).substr(2, 9);
  }

  getProjectFiles(): ProjectFiles {
    const allFiles = Array.from(this.files.values());
    return {
      configs: allFiles.filter(f => f.type === 'config'),
      templates: allFiles.filter(f => f.type === 'template'),
      sources: allFiles.filter(f => f.type === 'source' || f.type === 'other')
    };
  }

  getFileById(id: string): UploadedFile | undefined {
    return this.files.get(id);
  }

  deleteFile(id: string): boolean {
    const deleted = this.files.delete(id);
    if (deleted) {
      this.notifyListeners();
    }
    return deleted;
  }

  createNewTemplate(name: string, content: string = ''): UploadedFile {
    const template: UploadedFile = {
      id: this.generateId(),
      name: name.endsWith('.j2') ? name : `${name}.j2`,
      path: `templates/${name.endsWith('.j2') ? name : `${name}.j2`}`,
      type: 'template',
      size: content.length,
      content: content || this.getDefaultTemplateContent(),
      lastModified: new Date().toISOString()
    };

    this.files.set(template.id, template);
    this.notifyListeners();
    return template;
  }

  updateFile(id: string, updates: Partial<UploadedFile>): boolean {
    const file = this.files.get(id);
    if (!file) return false;

    const updatedFile = { ...file, ...updates, lastModified: new Date().toISOString() };
    this.files.set(id, updatedFile);
    this.notifyListeners();
    return true;
  }

  private getDefaultTemplateContent(): string {
    return `/* {{ template_name }} - STM32 Template */
/* Generated by STM32Cube Builder */

{% if config.header_comment %}
/*
 * {{ config.header_comment }}
 */
{% endif %}

#include "main.h"
{% for include in config.includes %}
#include "{{ include }}"
{% endfor %}

/* Private variables */
{% for variable in config.variables %}
{{ variable.type }} {{ variable.name }}{% if variable.value %} = {{ variable.value }}{% endif %};
{% endfor %}

/* Function implementations */
{% for function in config.functions %}
{{ function.return_type }} {{ function.name }}({% for param in function.parameters %}{{ param.type }} {{ param.name }}{% if not loop.last %}, {% endif %}{% endfor %})
{
    /* TODO: Implement {{ function.name }} */
    {% if function.return_type != 'void' %}
    return {% if function.return_type == 'int' %}0{% elif function.return_type == 'bool' %}false{% else %}NULL{% endif %};
    {% endif %}
}
{% endfor %}`;
  }
}

export const fileUploadService = new FileUploadService();
