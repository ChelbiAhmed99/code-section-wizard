
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import { 
  FileCode, 
  Search, 
  Plus, 
  Eye, 
  Edit, 
  Save, 
  Trash2, 
  FolderOpen,
  RefreshCw,
  Code,
  AlertCircle,
  CheckCircle,
  Copy
} from 'lucide-react';
import { TemplateEditor } from './TemplateEditor';
import { TemplatePreview } from './TemplatePreview';

interface TemplateFile {
  id: string;
  name: string;
  path: string;
  type: string;
  size: number;
  modified: string;
  content?: string;
}

interface TemplateFolder {
  name: string;
  path: string;
  files: TemplateFile[];
  subfolders: TemplateFolder[];
}

export const TemplateManager: React.FC = () => {
  const [templateStructure, setTemplateStructure] = useState<TemplateFolder | null>(null);
  const [selectedFile, setSelectedFile] = useState<TemplateFile | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [activeTab, setActiveTab] = useState('browser');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string>('');
  const [expandedFolders, setExpandedFolders] = useState<Set<string>>(new Set());

  // Mock template structure based on the provided project structure
  const mockTemplateStructure: TemplateFolder = {
    name: 'templates',
    path: 'apps/templates',
    files: [],
    subfolders: [
      {
        name: 'f4',
        path: 'apps/templates/f4',
        files: [],
        subfolders: [
          {
            name: 'STM32469I-Discovery',
            path: 'apps/templates/f4/STM32469I-Discovery',
            files: [
              {
                id: '1',
                name: 'linker_script.j2',
                path: 'apps/templates/f4/STM32469I-Discovery/linker/linker_script.j2',
                type: 'jinja2',
                size: 2048,
                modified: '2024-01-15',
                content: `/* STM32F469I-Discovery Linker Script Template */
/* Generated by STM32Cube Builder */

MEMORY
{
  FLASH (rx)      : ORIGIN = 0x08000000, LENGTH = {{ flash_size }}K
  RAM (xrw)       : ORIGIN = 0x20000000, LENGTH = {{ ram_size }}K
}

/* Entry Point */
ENTRY(Reset_Handler)

SECTIONS
{
  .isr_vector :
  {
    . = ALIGN(4);
    KEEP(*(.isr_vector))
    . = ALIGN(4);
  } >FLASH

  .text :
  {
    . = ALIGN(4);
    *(.text)
    *(.text*)
    {% if middleware.threadx %}
    *(.tx_text)
    {% endif %}
    {% if middleware.filex %}
    *(.fx_text)
    {% endif %}
    {% if middleware.netxduo %}
    *(.nx_text)
    {% endif %}
    {% if middleware.usbx %}
    *(.ux_text)
    {% endif %}
    . = ALIGN(4);
  } >FLASH
}`
              },
              {
                id: '2',
                name: 'rcc_config.j2',
                path: 'apps/templates/f4/STM32469I-Discovery/rcc/rcc_config.j2',
                type: 'jinja2',
                size: 1024,
                modified: '2024-01-15',
                content: `/* RCC Configuration Template for STM32F469I-Discovery */
/* Generated by STM32Cube Builder */

void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /* Configure the main internal regulator output voltage */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /* Initializes the RCC Oscillators according to the specified parameters */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = {{ pll_m }};
  RCC_OscInitStruct.PLL.PLLN = {{ pll_n }};
  RCC_OscInitStruct.PLL.PLLP = {{ pll_p }};
  RCC_OscInitStruct.PLL.PLLQ = {{ pll_q }};
  RCC_OscInitStruct.PLL.PLLR = {{ pll_r }};
  
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}`
              }
            ],
            subfolders: []
          }
        ]
      },
      {
        name: 'middleware',
        path: 'apps/templates/middleware',
        files: [
          {
            id: '3',
            name: 'threadx_config.j2',
            path: 'apps/templates/middleware/threadx_config.j2',
            type: 'jinja2',
            size: 3072,
            modified: '2024-01-15',
            content: `/* ThreadX Configuration Template */
/* Generated by STM32Cube Builder */

#ifndef TX_USER_H
#define TX_USER_H

/* Define ThreadX configuration */
#define TX_MAX_PRIORITIES                   {{ tx_max_priorities | default(32) }}
#define TX_MINIMUM_STACK                    {{ tx_minimum_stack | default(200) }}
#define TX_THREAD_USER_EXTENSION            {{ tx_thread_extension | default(0) }}
#define TX_TIMER_TICKS_PER_SECOND           {{ tx_timer_ticks | default(1000) }}

{% if board.has_led %}
/* LED Configuration */
#define LED_GREEN_PIN                       {{ get_led_pin('green') }}
#define LED_RED_PIN                         {{ get_led_pin('red') }}
#define LED_GPIO_PORT                       {{ get_led_port() }}
{% endif %}

{% if board.has_button %}
/* Button Configuration */
#define USER_BUTTON_PIN                     {{ get_button_pin() }}
#define USER_BUTTON_PORT                    {{ get_button_port() }}
{% endif %}

/* Memory pool sizes */
#define TX_BYTE_POOL_SIZE                   {{ tx_byte_pool_size | default(9120) }}
#define TX_BLOCK_POOL_SIZE                  {{ tx_block_pool_size | default(100) }}

#endif /* TX_USER_H */`
          }
        ],
        subfolders: []
      }
    ]
  };

  useEffect(() => {
    // Simulate loading template structure
    setIsLoading(true);
    setTimeout(() => {
      setTemplateStructure(mockTemplateStructure);
      setIsLoading(false);
    }, 1000);
  }, []);

  const toggleFolder = (folderPath: string) => {
    const newExpanded = new Set(expandedFolders);
    if (newExpanded.has(folderPath)) {
      newExpanded.delete(folderPath);
    } else {
      newExpanded.add(folderPath);
    }
    setExpandedFolders(newExpanded);
  };

  const renderFolderTree = (folder: TemplateFolder, level: number = 0) => {
    const isExpanded = expandedFolders.has(folder.path);
    
    return (
      <div key={folder.path} className={`ml-${level * 4}`}>
        <div
          className="flex items-center p-2 hover:bg-gray-100 cursor-pointer rounded"
          onClick={() => toggleFolder(folder.path)}
        >
          <FolderOpen className={`w-4 h-4 mr-2 ${isExpanded ? 'text-blue-600' : 'text-gray-500'}`} />
          <span className="text-sm font-medium">{folder.name}</span>
          <Badge variant="outline" className="ml-auto text-xs">
            {(folder.files?.length || 0) + (folder.subfolders?.length || 0)}
          </Badge>
        </div>
        
        {isExpanded && (
          <div className="ml-4">
            {folder.files?.map((file) => (
              <div
                key={file.id}
                className={`flex items-center p-2 hover:bg-blue-50 cursor-pointer rounded ${
                  selectedFile?.id === file.id ? 'bg-blue-100 border-l-4 border-blue-500' : ''
                }`}
                onClick={() => setSelectedFile(file)}
              >
                <FileCode className="w-4 h-4 mr-2 text-purple-500" />
                <span className="text-sm">{file.name}</span>
                <Badge variant="secondary" className="ml-auto text-xs">
                  {file.type}
                </Badge>
              </div>
            ))}
            
            {folder.subfolders?.map((subfolder) => 
              renderFolderTree(subfolder, level + 1)
            )}
          </div>
        )}
      </div>
    );
  };

  function getAllFiles(folder: TemplateFolder): TemplateFile[] {
    let files = [...(folder.files || [])];
    if (folder.subfolders && Array.isArray(folder.subfolders)) {
      folder.subfolders.forEach(subfolder => {
        files = files.concat(getAllFiles(subfolder));
      });
    }
    return files;
  }

  const filteredFiles = templateStructure ? 
    getAllFiles(templateStructure).filter(file => 
      file.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      file.path.toLowerCase().includes(searchTerm.toLowerCase())
    ) : [];

  return (
    <div className="flex h-full">
      {/* Sidebar - Template Browser */}
      <div className="w-1/3 border-r border-gray-200 bg-white">
        <div className="p-4 border-b border-gray-200">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-semibold text-gray-900">Template Files</h2>
            <Button size="sm" variant="outline">
              <Plus className="w-4 h-4 mr-2" />
              New
            </Button>
          </div>
          
          <div className="relative">
            <Search className="w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <Input
              placeholder="Search templates..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="h-full">
          <TabsList className="grid w-full grid-cols-2 p-1 m-4">
            <TabsTrigger value="browser">File Browser</TabsTrigger>
            <TabsTrigger value="search">Search Results</TabsTrigger>
          </TabsList>

          <TabsContent value="browser" className="m-0 h-full">
            <ScrollArea className="h-[calc(100%-120px)] p-4">
              {isLoading ? (
                <div className="flex items-center justify-center py-8">
                  <RefreshCw className="w-6 h-6 animate-spin text-blue-500" />
                  <span className="ml-2 text-gray-600">Loading templates...</span>
                </div>
              ) : templateStructure ? (
                renderFolderTree(templateStructure)
              ) : (
                <div className="text-center py-8 text-gray-500">
                  No templates found
                </div>
              )}
            </ScrollArea>
          </TabsContent>

          <TabsContent value="search" className="m-0 h-full">
            <ScrollArea className="h-[calc(100%-120px)] p-4">
              {searchTerm ? (
                filteredFiles.length > 0 ? (
                  <div className="space-y-2">
                    {filteredFiles.map((file) => (
                      <div
                        key={file.id}
                        className={`flex items-center p-3 hover:bg-blue-50 cursor-pointer rounded border ${
                          selectedFile?.id === file.id ? 'bg-blue-100 border-blue-300' : 'border-gray-200'
                        }`}
                        onClick={() => setSelectedFile(file)}
                      >
                        <FileCode className="w-4 h-4 mr-3 text-purple-500" />
                        <div className="flex-1 min-w-0">
                          <div className="text-sm font-medium text-gray-900 truncate">
                            {file.name}
                          </div>
                          <div className="text-xs text-gray-500 truncate">
                            {file.path}
                          </div>
                        </div>
                        <Badge variant="secondary" className="text-xs">
                          {file.type}
                        </Badge>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8 text-gray-500">
                    No templates match your search
                  </div>
                )
              ) : (
                <div className="text-center py-8 text-gray-500">
                  Enter a search term to find templates
                </div>
              )}
            </ScrollArea>
          </TabsContent>
        </Tabs>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col">
        {selectedFile ? (
          <Tabs defaultValue="editor" className="flex-1 flex flex-col">
            <div className="flex items-center justify-between p-4 border-b border-gray-200 bg-white">
              <div className="flex items-center space-x-3">
                <FileCode className="w-5 h-5 text-purple-500" />
                <div>
                  <h3 className="font-medium text-gray-900">{selectedFile.name}</h3>
                  <p className="text-xs text-gray-500">{selectedFile.path}</p>
                </div>
              </div>
              
              <TabsList>
                <TabsTrigger value="editor">
                  <Edit className="w-4 h-4 mr-2" />
                  Editor
                </TabsTrigger>
                <TabsTrigger value="preview">
                  <Eye className="w-4 h-4 mr-2" />
                  Preview
                </TabsTrigger>
              </TabsList>
            </div>

            <TabsContent value="editor" className="flex-1 m-0">
              <TemplateEditor 
                file={selectedFile}
                onSave={(content) => {
                  // Handle save
                  console.log('Saving template:', selectedFile.name, content);
                }}
              />
            </TabsContent>

            <TabsContent value="preview" className="flex-1 m-0">
              <TemplatePreview 
                file={selectedFile}
                templateContent={selectedFile.content || ''}
              />
            </TabsContent>
          </Tabs>
        ) : (
          <div className="flex-1 flex items-center justify-center bg-gray-50">
            <div className="text-center">
              <FileCode className="w-16 h-16 text-gray-300 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">No Template Selected</h3>
              <p className="text-gray-500 mb-4">
                Choose a template file from the browser to start editing
              </p>
              <Button>
                <Plus className="w-4 h-4 mr-2" />
                Create New Template
              </Button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};
